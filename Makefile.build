#
# Makefile for digabi-os
#
# (c) 2013, 2014 Ylioppilastutkintolautakunta / The Matriculation Examination Board of Finland
# <https://www.ylioppilastutkinto.fi/>
# <https://digabi.fi/>
#
# Author: Ville Korhonen <ville.korhonen@ylioppilastutkinto.fi>
#

#
# User-configurable variables
#
ARCH ?= i386
BINARY_IMAGES ?= iso-hybrid
BUILD_TAG ?= N/A
BUILD_NUMBER ?= 0.unknown
COMMIT ?= HEAD
DEBIAN_MIRROR ?= http://http.debian.net/debian
DIGABI_BUILD_CPUS ?= 1
DIGABI_BUILD_MEM ?= 1024
DIGABI_BUILD_TARGET ?= default
DIGABI_DEBUG ?= false
HTTP_PROXY ?= $(http_proxy)
REPOSITORY_SUITE ?= jessie
ROOT_PASSWORD ?=
VAGRANT_DEFAULT_PROVIDER ?= virtualbox
LB_OPTIONS ?=

EXTRA_CONFIG ?= 

#
# Other configuration
#

ROOT_CMD = sudo
BUILD_DIR = digabi-os.$(BUILD_NUMBER)
REPOSITORY = custom-packages/digabi-repository

GIT_REPOSITORY = /digabi-os.git

ARTIFACTS_DIR = dist
ARTIFACTS_MOUNT = /artifacts/
CONFIG_FILE = digabi-os.config.$(BUILD_NUMBER)

BUILD_CONFIG = $(BUILD_DIR)/target/default/digabi.local

VM_ENVIRONMENT ?= set -ex ; [ -f "/vagrant/$(CONFIG_FILE)" ] && source /vagrant/$(CONFIG_FILE)
VAGRANT  = vagrant

STAGE = .stage

#
# Targets
#
.DEFAULT_GOAL = dist


$(STAGE)/environment:
	@echo "Create artifacts dir..."
	mkdir -p $(ARTIFACTS_DIR)
	@echo "Provision vagrant..."
	vagrant up --provider=$(VAGRANT_DEFAULT_PROVIDER) --provision
	mkdir -p $(STAGE)
	touch $(STAGE)/environment

up: $(STAGE)/environment
	vagrant up

# Clean build environment
clean: $(STAGE)/environment up
	$(VAGRANT) ssh -c 'if [ -d "$(BUILD_DIR)" ] ; then sudo rm -rf "$(BUILD_DIR)" ; fi'
	mkdir -p $(STAGE)
	rm -f $(STAGE)/build* $(STAGE)/config
	touch $(STAGE)/clean

# Remove builder (destroys virtual machine)
purge:
	@echo "Purge..."
	$(VAGRANT) destroy -f || exit 0
	rm -rf $(STAGE)

# Configure build environment
$(STAGE)/config: $(STAGE)/environment up
	@echo "Configure build environment..."
	# Export variables to config/digabi.local (which is read by auto/config, auto/build)
	echo 'ARCH="$(ARCH)"' >>$(CONFIG_FILE)
	echo 'BINARY_IMAGES="$(BINARY_IMAGES)"' >>$(CONFIG_FILE)
	echo 'BUILD_NUMBER="$(BUILD_NUMBER)"' >>$(CONFIG_FILE)
	echo 'BUILD_TAG="$(BUILD_TAG)"' >>$(CONFIG_FILE)
	echo 'COMMIT="$(COMMIT)"' >>$(CONFIG_FILE)
	echo 'DEBIAN_MIRROR="$(DEBIAN_MIRROR)"' >>$(CONFIG_FILE)
	echo 'DIGABI_BUILD_CPUS="$(DIGABI_BUILD_CPUS)"' >>$(CONFIG_FILE)
	echo 'DIGABI_BUILD_MEM="$(DIGABI_BUILD_MEM)"' >>$(CONFIG_FILE)
	echo 'DIGABI_BUILD_TARGET="$(DIGABI_BUILD_TARGET)"' >>$(CONFIG_FILE)
	echo 'DIGABI_DEBUG="$(DIGABI_DEBUG)"' >>$(CONFIG_FILE)
	echo 'HTTP_PROXY="$(HTTP_PROXY)"' >>$(CONFIG_FILE)
	echo 'http_proxy="$(HTTP_PROXY)"' >>$(CONFIG_FILE)
	echo 'REPOSITORY_SUITE="$(REPOSITORY_SUITE)"' >> $(CONFIG_FILE)
	echo 'ROOT_PASSWORD="$(ROOT_PASSWORD)"' >>$(CONFIG_FILE)
	echo 'VAGRANT_DEFAULT_PROVIDER="$(VAGRANT_DEFAULT_PROVIDER)"' >>$(CONFIG_FILE)

	$(VAGRANT) ssh -c '$(VM_ENVIRONMENT) ; if [ ! -d $(BUILD_DIR) ] ; then git clone $(GIT_REPOSITORY) $(BUILD_DIR) ; else cd $(BUILD_DIR) ; git checkout $(COMMIT) ; fi'
	$(VAGRANT) ssh -c '$(VM_ENVIRONMENT) ; cd $(BUILD_DIR) && git submodule init && git submodule update'
	$(VAGRANT) ssh -c '$(VM_ENVIRONMENT) ; cp /vagrant/$(CONFIG_FILE) $(BUILD_CONFIG)'
	$(VAGRANT) ssh -c '$(VM_ENVIRONMENT) ; if [[ -n "$(EXTRA_CONFIG)" && -d "$(EXTRA_CONFIG)" ]] ; then git clone $(EXTRA_CONFIG) $(BUILD_DIR)/target/extra ; fi'

	$(VAGRANT) ssh -c 'cd $(BUILD_DIR) && lb config $(LB_OPTIONS)'
	mkdir -p $(STAGE)
	touch $(STAGE)/config
	rm -f $(STAGE)/build $(STAGE)/clean

config: $(STAGE)/config

# Build new image
$(STAGE)/build: $(STAGE)/config up
	@echo "Build image..."
	$(VAGRANT) ssh -c '$(VM_ENVIRONMENT) ; cd $(BUILD_DIR) && sudo lb build ; mv digabi-* $(ARTIFACTS_MOUNT)'
	mkdir -p $(STAGE)
	touch $(STAGE)/build

build-kernel: $(STAGE)/environment up
	@echo "Prepare environment..."
	$(VAGRANT) ssh -c '$(VM_ENVIRONMENT) ; sudo apt-get update && apt-get source linux'
	@echo "Increment package version..."
	$(VAGRANT) ssh -c 'cd linux-* && debchange --local digabi$(shell date +%Y%m%d%H%M%S) "Automated build by CI (dos-kernel)."'
	@echo "Try building. First build fails after updating version, so ignore the fail..."
	$(VAGRANT) ssh -c 'cd linux-* && debuild-pbuilder -us -uc -j$(DIGABI_BUILD_CPUS) || exit 0'
	@echo "Now building packages..."
	$(VAGRANT) ssh -c 'cd linux-* && debuild-pbuilder -us -uc -j$(DIGABI_BUILD_CPUS)'
	#$(VAGRANT) ssh -c '$(VM_ENVIRONMENT) ; cd linux-* && fakeroot make -j$(DIGABI_BUILD_CPUS) -f debian/rules.gen binary-arch_i386_none_686-pae'
	#$(VAGRANT) ssh -c '$(VM_ENVIRONMENT) ; cd linux-* && fakeroot make -j$(DIGABI_BUILD_CPUS) -f debian/rules.gen binary-arch_amd64_none_none'
	$(VAGRANT) ssh -c '$(VM_ENVIRONMENT) ; mv *.deb *.dsc *.changes *.xz $(ARTIFACTS_MOUNT)'

package-%: $(STAGE)/environment up
	$(VAGRANT) ssh -c '$(VM_ENVIRONMENT) ; sudo apt-get update && apt-get source $@ && cd $@-* && debuild-pbuilder -j$(DIGABI_BUILD_CPUS) -us -uc'
	$(VAGRANT) ssh -c '$(VM_ENVIRONMENT) ; mv *.deb *.dsc *.changes *.xz $(ARTIFACTS_MOUNT)'

build: $(STAGE)/build

# Collect build artifacts (.ISO) to dist/
$(STAGE)/collect: $(STAGE)/build
	touch $(STAGE)/collect

# Build image & collect results
dist:	$(STAGE)/collect

debug: $(STAGE)/environment
	$(VAGRANT) ssh || exit 0
